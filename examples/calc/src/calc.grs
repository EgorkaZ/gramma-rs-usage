#![allow(non_snake_case)]
grammar

sym Expr : f64
{ l:Expr Plus r:Term => { l + r }
, l:Expr Minus r:Term => { l - r }
, sub:Term => { sub }
}

Term : f64
{ l:Term Star r:Factor => { l * r }
, l:Term Div r:Factor => { l / r }
, sub:Factor => { sub }
}

Factor : f64
{ Minus sub:Negative => { -sub }
, sub:Negative => { sub }
}

Negative : f64
{ f:Float => { f }
, LPar sub:Expr RPar => { sub }
}

Float : f64
{ f:Num Dot s:Num => { format!("{f}.{s}").parse().unwrap() }
, n:Num => { n.parse().unwrap() }
}

grammar_end

lexer

tok Num = [0-9]+;

tok Plus = "+";
tok Star = "*";
tok Minus = "-";
tok Div = "/";

tok Dot = ".";

tok LPar = "(";
tok RPar = ")";

lexer_end